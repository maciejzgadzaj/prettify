<?php

/**
 * @file
 * Automatic syntax highlighting of source code snippets using Google Code
 * Prettify JavaScript library.
 *
 * Google Code Prettify for Drupal
 * http://code.google.com/p/google-code-prettify/
 */

use Drupal\Component\Utility\Html;
use Drupal\Component\Utility\UrlHelper;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\prettify\Plugin\Filter\PrettifyCode;

/**
 * Implements hook_help().
 */
function prettify_help($path, $arg) {
  switch ($path) {
    case 'admin/help#prettify':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Syntax highlighting of source code snippets using <a href="@url">Google Code Prettify</a> library.', ['@url' => 'http://code.google.com/p/google-code-prettify']) . '</p>';
      $output .= '<h3>' . t('Features') . '</h3>';
      $output .= '<ul>';
      $output .= '<li>' . t('Simple use: include some JS &amp; CSS and add an onload handler.') . '</li>';
      $output .= '<li>' . t('Lightweights: small download and does not block page from loading while running.') . '</li>';
      $output .= '<li>' . t('Customizable styles via CSS.') . '</li>';
      $output .= '<li>' . t('Supports all C-like, Bash-like, and XML-like languages. No need to specify the language.') . '</li>';
      $output .= '<li>' . t('Extensible language handlers for other languages. You can specify the language.') . '</li>';
      $output .= '<li>' . t('Widely used with good cross-browser support. Powers <a href="@googlecode">code.google.com</a> and <a href="@stackoverflow">stackoverflow.com</a>.', ['@googlecode' => 'http://code.google.com', '@stackoverflow' => 'http://stackoverflow.com']) . '</li>';
      $output .= '</ul>';
      $output .= '<h3>' . t('Credits') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Author and maintainer') . '</dt>';
      $output .= '<dd>' . t('<a href="@url">Sergio Mart√≠n Morillas</a>', ['@url' => 'http://drupal.org/user/191570']) . '</dd>';
      $output .= '</dl>';
      return $output;
    case 'admin/config/user-interface/prettify':
      $output = '<p>' . t("<em>Code Prettify</em> is very easy to use. Simply select the markup you're using for code blocks and Prettify will automatically detect the language of the code and highlight it. If you don't want to use automatic code syntax highlighting, Code Prettify also creates a text filter which can be added to any <a href=\"@input-format\">text format</a>.", ['@input-format' => Url::fromRoute('filter.admin_overview')]) . '</p>';
      return $output;
  }
}

/**
 * Implements hook_page_attachments().
 */
function prettify_page_attachments(array &$attachments) {
  // Only load library on match page specific activation
  if (prettify_activation_page_match()) {
    $attachments['#attached']['library'][] = 'prettify/prettify';
    prettify_add_library($attachments);
  }
}

/**
 * Add prettify javascript, settings, stylesheets and loader to the page.
 */
function prettify_add_library(&$attachments) {
  static $processed;
  // Make sure resources are not included more than once.
  if (isset($processed)) {
    return;
  }
  $processed = TRUE;

  // Check if library exists.
  $library = \Drupal::service('library.discovery')->getLibraryByName('prettify', 'prettify');
  if (!file_exists(DRUPAL_ROOT . '/' . $library['js'][0]['data'])) {
    return;
  }

  // Retrieve configuration object.
  $config = \Drupal::config('prettify.settings');

  // Retrieve the settings from the config object.
  $js_settings_markup = $config->get('auto_markup');
  $js_settings_linenums = $config->get('behaviour_linenums');
  $js_settings_match = $config->get('auto_element_class');
  $js_settings_nocode = $config->get('auto_disabled_class');
  $js_settings_custom_markup = array_values(array_filter(explode("[,\n\r]", $config->get('auto_custom_markup'))));

  // Create an array to pass settings to js.
  $js_settings = [
    'linenums' => !empty($js_settings_linenums),
    'match' => $js_settings_match,
    'nocode' => $js_settings_nocode,
    'custom' => $js_settings_custom_markup,
    'markup' => [],
  ];
  foreach ($js_settings_markup as $tag => $enabled) {
    $js_settings['markup'][$tag] = !empty($enabled);
  }

  // Attach js settings array.
  $attachments['#attached']['drupalSettings']['prettify'] = $js_settings;

  // Add global enabled languages extensions.
  if ($extensions = $config->get('behaviour_extensions')) {
    foreach ($extensions as $lang => $enabled) {
      if (!empty($enabled)) {
        $attachments['#attached']['library'][] = 'prettify/lang-' . $lang;
      }
    }
  }

  // Add stylesheets.
  $css = $config->get('css', 'default');
  $attachments['#attached']['library'][] = 'prettify/theme-' . $css;
}

/**
 * Implements hook_library_info_build().
 */
function prettify_library_info_build() {
  $libraries = [];

  $config = \Drupal::config('prettify.settings');
  $css = $config->get('css', 'default');
  if ($css == 'custom') {
    $css_path = strtr($config->get('css_path'), [
      '%b' => base_path(),
      '%t' => \Drupal::theme()->getActiveTheme()->getPath(),
    ]);
    $libraries['prettify.theme-custom'] = [
      'css' => [
        'theme' => [
          $css_path => [],
        ],
      ],
    ];
    if (UrlHelper::isExternal($css_path)) {
      $libraries['prettify.theme-custom']['css']['theme'][$css_path]['type'] = 'external';
    }
  }

  return $libraries;
}

/**
 * Return TRUE if current path is enabled for load prettify.
 */
function prettify_activation_page_match() {
  $config = \Drupal::config('prettify.settings');
  $pages = $config->get('activation_pages');
  if ($pages) {
    $activation = $config->get('activation_mode');
    $current_path = \Drupal::service('path.current')->getPath();
    $path = Drupal::service('path.alias_manager')->getAliasByPath($current_path);
    // Compare with the internal and path alias (if any).
    $page_match = \Drupal::service('path.matcher')->matchPath($path, $pages);
    if ($path != $current_path) {
      $page_match = $page_match || \Drupal::service('path.matcher')->matchPath($current_path, $pages);
    }
    // When $activation has a value of 0, prettify is loaded on all pages
    // except those listed in $pages. When set to 1, it is loaded only on
    // those pages listed in $pages.
    $page_match = !($activation xor $page_match);
  }
  else {
    $page_match = TRUE;
  }

  return $page_match;
}

/**
 * Implements hook_theme().
 */
function prettify_theme() {
  return [
    'prettify' => [
      'variables' => [
        'text' => NULL,
        'markup' => PrettifyCode::PRETTIFY_MARKUP_CODE,
        'linenums' => FALSE,
        'language' => NULL,
        'html5' => TRUE,
      ],
    ],
  ];
}

/**
 * Implements hook_form_FORM_ID_alter() for 'filter_format_edit_form'.
 */
function prettify_form_filter_format_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#validate'][] = 'prettify_form_filter_format_edit_form_validate';
}

/**
 * Form validation callback for 'filter_format_edit_form'.
 *
 * @see prettify_form_filter_format_edit_form_alter()
 */
function prettify_form_filter_format_edit_form_validate($form, FormStateInterface $form_state) {
  $filters = $form_state->getValue('filters');

  if (
    !empty($filters['filter_prettify']['status'])
    && !empty($filters['filter_html']['status'])
    && $filters['filter_prettify']['weight'] < $filters['filter_html']['weight']
  ) {
    $format_id = $form_state->getValue('format');
    /** @var \Drupal\filter\Entity\FilterFormat $format */
    $format = \Drupal::entityTypeManager()->getStorage('filter_format')->load($format_id);
    /** @var \Drupal\filter\FilterPluginCollection $filters */
    $filters = $format->filters();

    drupal_set_message(t('Make sure that the %filter_prettify filter is configured to be processed after the %filter_html filter.', [
      '%filter_prettify' => $filters->get('filter_prettify')->getLabel(),
      '%filter_html' => $filters->get('filter_html')->getLabel(),
    ]), 'warning');
  }
}

/**
 * Callback to escape content of the prettify elements.
 */
function _prettify_escape_callback($matches) {
  return prettify_escape_code($matches[2], $matches[1]);
}

/**
 * Callback to replace content of the prettify elements.
 */
function _prettify_process_callback($matches) {
  return prettify_process_code($matches[2], $matches[1]);
}

/**
 * Escape code blocks during input filter 'prepare'.
 *
 * This code is based in codefilter_escape() function.
 */
function prettify_escape_code($text, $options) {
  // Note, pay attention to odd preg_replace-with-/e behaviour on slashes
  $text = Html::escape(str_replace('\"', '"', $text));

  // Protect newlines from line break converter
  $text = str_replace(["\r", "\n"], ['', '&#10;'], $text);

  // Add codefilter escape tags
  $text = "[prettify{$options}]{$text}[/prettify]";

  return $text;
}

/**
 * Processes chunks of escaped code into HTML.
 *
 * This code is based in codefilter_process_code() function.
 */
function prettify_process_code($text, $options) {
  $config = \Drupal::config('prettify.settings');

  // Undo linebreak escaping.
  $text = str_replace('&#10;', "\n", $text);

  // Inline or block level piece?
  $multiline = strpos($text, "\n") !== FALSE;

  // Note, pay attention to odd preg_replace-with-/e behaviour on slashes.
  $text = preg_replace("/^\n/", '', preg_replace('@</?(br|p)\s*/?>@', '', str_replace('\"', '"', $text)));

  // Trim leading and trailing linebreaks.
  $text = trim($text, "\n");

  // Escape newlines.
  $text = nl2br($text);

  // Prettifier code.
  $render_array = [
    '#theme' => 'prettify',
    '#tag' => $multiline ? PrettifyCode::PRETTIFY_MARKUP_PRECODE : PrettifyCode::PRETTIFY_MARKUP_CODE,
    '#markup' => _prettify_fix_spaces(str_replace(' ', '&nbsp;', $text)),
    '#linenums' => (bool) $config->get('behaviour_linenums'),
  ];
  $text = \Drupal::service('renderer')->render($render_array);

  // Remove newlines to avoid clashing with the linebreak filter
  return str_replace("\n", '', $text);
}

/**
 * Helper function for prettify_process_code().
 */
function _prettify_fix_spaces($text) {
  return preg_replace('@&nbsp;(?!&nbsp;)@', ' ', $text);
}
